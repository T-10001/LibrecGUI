package net.librec.gui;

import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.event.WindowEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import net.librec.util.ConfirmationUtil;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author PinkySwear
 */
public class DatasetParameterEditor extends javax.swing.JFrame {

	private String dataset;
	
    /**
     * Creates new form ParameterEdit
     */
    public DatasetParameterEditor() {
    	
    	initComponents();
        // set location at mouse cursor
//    	Point location = MouseInfo.getPointerInfo().getLocation(); 
//        int x = (int) location.getX();
//        int y = (int) location.getY();
//        setLocation(x, y);
//        setVisible(true);
        
        
    }
    
    public DatasetParameterEditor(String dataset)
    {
    	this.dataset = dataset;
        initComponents();
        checkBoxUIR.setSelected(true);
        checkBoxSplitRatio.setSelected(true);
     // set for the whole GUI
        setDefaultCloseOpt();
        setTitle("Parameter editor for " + dataset);
        tableSplitRatio.adjustColumnWidth();
        tableKeepN.adjustColumnWidth();
        tableSplitRatio.setShowVerticalLines(true);
        tableKeepN.setShowVerticalLines(true);
        //setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        panelAll = new javax.swing.JPanel();
        buttonCancel = new javax.swing.JButton();
        buttonSave = new javax.swing.JButton();
        panelSplitRatio = new javax.swing.JPanel();
        labelSplitRatio = new javax.swing.JLabel();
        checkBoxSplitRatio = new javax.swing.JCheckBox();
        scrollPaneSplitRatio = new javax.swing.JScrollPane();
        tableSplitRatio = new UserFriendlyTable();
        panelKeepN = new javax.swing.JPanel();
        checkBoxKeepN = new javax.swing.JCheckBox();
        labelKeepN = new javax.swing.JLabel();
        scrollPaneKeepN = new javax.swing.JScrollPane();
        tableKeepN = new UserFriendlyTable();
        panelSplitKFolds = new javax.swing.JPanel();
        comboBoxStartFolds = new javax.swing.JComboBox<>();
        checkBoxKFolds = new javax.swing.JCheckBox();
        labelStartFolds = new javax.swing.JLabel();
        labelKFolds = new javax.swing.JLabel();
        labelStepFolds = new javax.swing.JLabel();
        comboBoxStepFolds = new javax.swing.JComboBox<>();
        labelEndFolds = new javax.swing.JLabel();
        comboBoxEndFolds = new javax.swing.JComboBox<>();
        panelColumnFormat = new javax.swing.JPanel();
        labelColumnFormat = new javax.swing.JLabel();
        checkBoxUIR = new javax.swing.JCheckBox();
        checkBoxUIRT = new javax.swing.JCheckBox();
        panelBinarise = new javax.swing.JPanel();
        checkBoxBinariseRatings = new javax.swing.JCheckBox();
        labelThresholdMin = new javax.swing.JLabel();
        textFieldThresholdMin = new javax.swing.JTextField();
        checkBoxBinaryStep = new javax.swing.JCheckBox();
        textFieldThresholdStep = new javax.swing.JTextField();
        labelThresholdMax = new javax.swing.JLabel();
        textFieldThresholdMax = new javax.swing.JTextField();
        jToolBar1 = new javax.swing.JToolBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        panelAll.setBorder(javax.swing.BorderFactory.createTitledBorder("Edit data set properties"));

        buttonCancel.setText("CANCEL");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        buttonSave.setText("SAVE");
//        buttonSave.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                buttonSaveActionPerformed(evt);
//            }
//        });

        panelSplitRatio.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        labelSplitRatio.setText("Spilt by ratio");
        labelSplitRatio.setToolTipText("Split the data according to a ratio.");

        tableSplitRatio.setAutoCreateRowSorter(true);
        tableSplitRatio.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {true, "user", 0.8, 0.0, 0.8, 0.8},
                {false, "userfixed", 0.0, 0.5, 1.0, 0.5},
                {false, "item", 0.0, 0.5, 1.0, 0.8},
                {false, "valid", 0.0, 0.5, 1.0, 0.5},
                {false, "ratingdate", 0.0, 0.5, 1.0, 0.5},
            },
            new String [] {
                "", "Type", "Start value", "Step", "End value", "Manual values"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableSplitRatio.setColumnSelectionAllowed(true);
        scrollPaneSplitRatio.setViewportView(tableSplitRatio);
        tableSplitRatio.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        javax.swing.GroupLayout panelSplitRatioLayout = new javax.swing.GroupLayout(panelSplitRatio);
        panelSplitRatio.setLayout(panelSplitRatioLayout);
        panelSplitRatioLayout.setHorizontalGroup(
            panelSplitRatioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSplitRatioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSplitRatioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
													 
                    .addGroup(panelSplitRatioLayout.createSequentialGroup()
										   
                        .addGroup(panelSplitRatioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkBoxSplitRatio)
                            .addGroup(panelSplitRatioLayout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(labelSplitRatio)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(scrollPaneSplitRatio, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        panelSplitRatioLayout.setVerticalGroup(
            panelSplitRatioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSplitRatioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSplitRatioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(checkBoxSplitRatio)
                    .addComponent(labelSplitRatio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPaneSplitRatio, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelKeepN.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        labelKeepN.setText("Keep N as test");
        labelKeepN.setToolTipText("Keep N users or items as the test data, and the rest as the train data.");

        scrollPaneKeepN.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        tableKeepN.setAutoCreateRowSorter(true);
        tableKeepN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {false, "user", 1, 2, 4, 1},
                {false, "item", 1, 2, 5, 1},
                
                
            },
            new String [] {
                "", "Type", "Start value", "Step", "End value", "Manual values"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
		tableKeepN.setColumnSelectionAllowed(true);
        tableKeepN.setMinimumSize(new java.awt.Dimension(75, 10));
        tableKeepN.setPreferredSize(new java.awt.Dimension(375, 33));
        scrollPaneKeepN.setViewportView(tableKeepN);
        tableKeepN.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tableKeepN.getAccessibleContext().setAccessibleParent(null);

        javax.swing.GroupLayout panelKeepNLayout = new javax.swing.GroupLayout(panelKeepN);
        panelKeepN.setLayout(panelKeepNLayout);
        panelKeepNLayout.setHorizontalGroup(
            panelKeepNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelKeepNLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelKeepNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPaneKeepN)
                    .addGroup(panelKeepNLayout.createSequentialGroup()
										   
                        .addGroup(panelKeepNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkBoxKeepN)
                            .addGroup(panelKeepNLayout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(labelKeepN)))
                        .addGap(0, 447, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelKeepNLayout.setVerticalGroup(
            panelKeepNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelKeepNLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelKeepNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(labelKeepN)
                    .addComponent(checkBoxKeepN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPaneKeepN, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelSplitKFolds.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        comboBoxStartFolds.setMaximumRowCount(9);
        comboBoxStartFolds.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        comboBoxStartFolds.setToolTipText("Select number of folds");

        labelStartFolds.setText("Start folds:");

        labelKFolds.setText("Split into K-folds");
//        labelKFolds.setToolTipText("K-fold cross-validation, splits the data into K folds. \nEvery time, it selects one fold as the test set and the rest as the train set.\nEvaluation would be applied on each fold.\nAfter K times, the final evaluation result would the average of all the folds.");
        labelKFolds.setToolTipText("<html>K-fold cross-validation, splits the data into K folds.<br>Every time, it selects one fold as the test set and the rest as the train set.<br>"
        		+ "Evaluation would be applied on each fold.<br>After K times, the final evaluation result would the average of all the folds.<html>");

        labelStepFolds.setText("Step folds:");

        comboBoxStepFolds.setMaximumRowCount(9);
        comboBoxStepFolds.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7" }));
        comboBoxStepFolds.setToolTipText("Select number of folds");

        labelEndFolds.setText("End folds:");

        comboBoxEndFolds.setMaximumRowCount(9);
        comboBoxEndFolds.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "3", "4", "5", "6", "7", "8", "9", "10" }));
        comboBoxEndFolds.setToolTipText("Select number of folds");

        javax.swing.GroupLayout panelSplitKFoldsLayout = new javax.swing.GroupLayout(panelSplitKFolds);
        panelSplitKFolds.setLayout(panelSplitKFoldsLayout);
        panelSplitKFoldsLayout.setHorizontalGroup(
            panelSplitKFoldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSplitKFoldsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSplitKFoldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSplitKFoldsLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(panelSplitKFoldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelKFolds)
                            .addGroup(panelSplitKFoldsLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(labelStartFolds)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboBoxStartFolds, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(labelStepFolds)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboBoxStepFolds, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(labelEndFolds)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboBoxEndFolds, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(checkBoxKFolds))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelSplitKFoldsLayout.setVerticalGroup(
            panelSplitKFoldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSplitKFoldsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSplitKFoldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(labelKFolds)
                    .addComponent(checkBoxKFolds))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSplitKFoldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												  
													 
												 
													
                    .addGroup(panelSplitKFoldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelEndFolds)
                        .addComponent(comboBoxEndFolds))
                    .addGroup(panelSplitKFoldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelStartFolds)
                        .addComponent(comboBoxStartFolds)
                        .addComponent(labelStepFolds)
                        .addComponent(comboBoxStepFolds)))
                .addContainerGap())
        );

        panelColumnFormat.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        labelColumnFormat.setText("Column format:");
        labelColumnFormat.setToolTipText("Format of the dataset file columns.");

        checkBoxUIR.setText("User-Item-Rating");
        checkBoxUIR.setToolTipText("");

        checkBoxUIRT.setText("User-Item-Rating-Time");

        javax.swing.GroupLayout panelColumnFormatLayout = new javax.swing.GroupLayout(panelColumnFormat);
        panelColumnFormat.setLayout(panelColumnFormatLayout);
        panelColumnFormatLayout.setHorizontalGroup(
            panelColumnFormatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelColumnFormatLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelColumnFormatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelColumnFormat)
                    .addComponent(checkBoxUIR)
                    .addComponent(checkBoxUIRT))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelColumnFormatLayout.setVerticalGroup(
            panelColumnFormatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelColumnFormatLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelColumnFormat)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkBoxUIR)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkBoxUIRT)
                .addContainerGap())
        );

        panelBinarise.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        checkBoxBinariseRatings.setText("Binarise ratings");

        labelThresholdMin.setText("Min binary threshold:");

        checkBoxBinaryStep.setText("Step:");

        labelThresholdMax.setText("Max binary threshold:");

        textFieldThresholdMax.setText("           ");

        javax.swing.GroupLayout panelBinarise1Layout = new javax.swing.GroupLayout(panelBinarise);
        panelBinarise.setLayout(panelBinarise1Layout);
        panelBinarise1Layout.setHorizontalGroup(
            panelBinarise1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBinarise1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelBinarise1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkBoxBinariseRatings)
                    .addGroup(panelBinarise1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(labelThresholdMin)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textFieldThresholdMin, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(checkBoxBinaryStep)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textFieldThresholdStep, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(labelThresholdMax)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textFieldThresholdMax, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelBinarise1Layout.setVerticalGroup(
            panelBinarise1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBinarise1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(checkBoxBinariseRatings)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelBinarise1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelThresholdMin)
                    .addComponent(textFieldThresholdMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkBoxBinaryStep)
                    .addComponent(textFieldThresholdStep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelThresholdMax)
                    .addComponent(textFieldThresholdMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        javax.swing.GroupLayout panelAllLayout = new javax.swing.GroupLayout(panelAll);
        panelAll.setLayout(panelAllLayout);
        panelAllLayout.setHorizontalGroup(
            panelAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAllLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(panelSplitKFolds, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
																		
                    .addComponent(panelKeepN, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
																								  
                    .addComponent(panelSplitRatio, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelAllLayout.createSequentialGroup()
											  
                        .addComponent(buttonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panelColumnFormat, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelBinarise, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        panelAllLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {buttonCancel, buttonSave});

        panelAllLayout.setVerticalGroup(
            panelAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAllLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelColumnFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(panelBinarise, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(panelSplitRatio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(panelKeepN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(panelSplitKFolds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

		jToolBar1.setRollover(false);
		jToolBar1.setFloatable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>                        
                      
                        

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {                                           
    	if(ConfirmationUtil.getConfirmation("Really save these parameter settings?", "Really save?"))
    	{
////    		BalloonTip balloonTip = new BalloonTip(f, "Tooltip msg");
////    		int checks = 0;
//    		String pathname = System.getProperty("user.dir") + File.separator + "conf" + File.separator;
//    		String checks = "";
//    		if(checkBoxKFolds.isSelected())
//    		{
//    			checks += "kcv";
//    		}
//    		if(checkBoxKeepN.isSelected())
//    		{
//    			checks += "givenn";
//    		}
//    		if(checkBoxSplitRatio.isSelected())
//    		{
//    			//checks++;
//    		}
//    		System.out.println(checks);
    		System.out.println("Saved parameters for " + dataset);
//    		System.out.println(System.getProperty("user.dir"));
    		
    		// close the editor
    		dispose();
    	}
    }                                          

    public void save()
    {
    	System.out.println("Saved parameters for " + dataset);
    	dispose();
    }
    
    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {                                             
    	if(ConfirmationUtil.getConfirmation("If you cancel, your changes will not be saved. Are you sure you want to cancel?", "Really cancel?"))
    	{
    		dispose();
    	}
    }
    
    public boolean binariseRatingsIsSelected()
    {
    	return checkBoxBinariseRatings.isSelected();
    }
    
    public boolean binaryStepIsSelected()
    {
    	return checkBoxBinaryStep.isSelected();
    }
    
    public boolean kFoldsIsSelected()
    {
    	return checkBoxKFolds.isSelected();
    }
    
    public boolean keepNIsSelected()
    {
    	return checkBoxKeepN.isSelected();
    }
    
    public boolean splitRatioIsSelected()
    {
    	return checkBoxSplitRatio.isSelected();
    }
    
    public List<Object> getColumnFormats()
    {
    	List<Object> columnFormats = new ArrayList<>();
    	
    	if(checkBoxUIR.isSelected())
    		columnFormats.add("UIR");
    	if(checkBoxUIRT.isSelected())
    		columnFormats.add("UIRT");
    	
    	return columnFormats;
    }

    public String getDataset()
	{
		return dataset;
	}

	public javax.swing.JButton getButtonCancel()
	{
		return buttonCancel;
	}

	public javax.swing.JButton getButtonSave()
	{
		return buttonSave;
	}
	
	public javax.swing.JCheckBox getCheckBoxBinariseRatings()
	{
		return checkBoxBinariseRatings;
	}

	public javax.swing.JCheckBox getCheckBoxBinaryStep()
	{
		return checkBoxBinaryStep;
	}

	public double getThresholdMax()
	{
		if(!textFieldThresholdMax.getText().isEmpty())
			return Double.parseDouble(textFieldThresholdMax.getText());
		else
			return -1.0;
	}

	public double getThresholdMin()
	{
		if(!textFieldThresholdMin.getText().isEmpty())
			return Double.parseDouble(textFieldThresholdMin.getText());
		else
			return -1.0;

	}

	public double getThresholdStep()
	{
		if(!textFieldThresholdStep.getText().isEmpty())
			return Double.parseDouble(textFieldThresholdStep.getText());
		else
			return -1.0;
	}

	public javax.swing.JCheckBox getCheckBoxKFolds()
	{
		return checkBoxKFolds;
	}

	public javax.swing.JCheckBox getCheckBoxKeepN()
	{
		return checkBoxKeepN;
	}

	public javax.swing.JCheckBox getCheckBoxSplitRatio()
	{
		return checkBoxSplitRatio;
	}

	public javax.swing.JCheckBox getCheckBoxUIR()
	{
		return checkBoxUIR;
	}

	public javax.swing.JCheckBox getCheckBoxUIRT()
	{
		return checkBoxUIRT;
	}

	public javax.swing.JComboBox<String> getComboBoxStartFolds()
	{
		return comboBoxStartFolds;
	}

	public javax.swing.JComboBox<String> getComboBoxStepFolds()
	{
		return comboBoxStepFolds;
	}

	public javax.swing.JComboBox<String> getComboBoxEndFolds()
	{
		return comboBoxEndFolds;
	}
	
	public int getStartFolds()
	{
		return Integer.parseInt(comboBoxStartFolds.getSelectedItem().toString());
	}

	public int getStepFolds()
	{
		return Integer.parseInt(comboBoxStepFolds.getSelectedItem().toString());
	}

	public int getEndFolds()
	{
		return Integer.parseInt(comboBoxEndFolds.getSelectedItem().toString());
	}

	public UserFriendlyTable getTableKeepN()
	{
		return tableKeepN;
	}

	public UserFriendlyTable getTableSplitRatio()
	{
		return tableSplitRatio;
	}

	private void setDefaultCloseOpt()
    {
    	setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
		addWindowListener(new java.awt.event.WindowAdapter() {
			@Override
			public void windowClosing(java.awt.event.WindowEvent windowEvent)
			{
				if (ConfirmationUtil.getConfirmation("Are you sure you want to close? Any changes you made will not be saved.", "Really Closing?"))
				{
					windowEvent.getWindow().dispose();
				}

			}
		});
    }
    
    public javax.swing.JButton getSaveButton()
    {
    	return buttonSave;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DatasetParameterEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DatasetParameterEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DatasetParameterEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DatasetParameterEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DatasetParameterEditor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonSave;
    private javax.swing.JCheckBox checkBoxBinariseRatings;
    private javax.swing.JCheckBox checkBoxBinaryStep;
    private javax.swing.JCheckBox checkBoxKFolds;
    private javax.swing.JCheckBox checkBoxKeepN;
    private javax.swing.JCheckBox checkBoxSplitRatio;
    private javax.swing.JCheckBox checkBoxUIR;
    private javax.swing.JCheckBox checkBoxUIRT;
    private javax.swing.JComboBox<String> comboBoxStartFolds;
    private javax.swing.JComboBox<String> comboBoxStepFolds;
    private javax.swing.JComboBox<String> comboBoxEndFolds;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel labelColumnFormat;
    private javax.swing.JLabel labelEndFolds;
    private javax.swing.JLabel labelKFolds;
    private javax.swing.JLabel labelKeepN;
    private javax.swing.JLabel labelSplitRatio;
    private javax.swing.JLabel labelStartFolds;
    private javax.swing.JLabel labelStepFolds;
    private javax.swing.JLabel labelThresholdMax;
    private javax.swing.JLabel labelThresholdMin;
    private javax.swing.JPanel panelAll;
    private javax.swing.JPanel panelBinarise;
    private javax.swing.JPanel panelColumnFormat;
    private javax.swing.JPanel panelKeepN;
    private javax.swing.JPanel panelSplitKFolds;
    private javax.swing.JPanel panelSplitRatio;
    private javax.swing.JScrollPane scrollPaneKeepN;
    private javax.swing.JScrollPane scrollPaneSplitRatio;
    private UserFriendlyTable tableKeepN;
    private UserFriendlyTable tableSplitRatio;
    private javax.swing.JTextField textFieldThresholdMax;
    private javax.swing.JTextField textFieldThresholdMin;
    private javax.swing.JTextField textFieldThresholdStep;
    // End of variables declaration                   
}
